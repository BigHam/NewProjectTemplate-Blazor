// <auto-generated />
using System;
using Havit.Data.EntityFrameworkCore.Attributes;
using Havit.GoranG3.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Havit.GoranG3.Entity.Migrations
{
    [DbContext(typeof(GoranG3DbContext))]
    partial class GoranG3DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.ContactSequence", "'ContactSequence', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.ProjectSequence", "'ProjectSequence', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.TeamSequence", "'TeamSequence', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Havit.Data.EntityFrameworkCore.Model.DataSeedVersion", b =>
                {
                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileName")
                        .HasName("PK_DataSeed");

                    b.ToTable("__DataSeed");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.HasIndex("CreatedById");

                    b.ToTable("AttridaComment");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("StorageFilename")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.ToTable("AttridaDocument");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("AttridaObject");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.ToTable("AttridaTag");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Common.ApplicationSettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Common.DateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DateInfo");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Address");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);

                    b.HasAnnotation("Caching-Priority", CacheItemPriority.Low);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.BusinessCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<int?>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessCaseType")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FinancialValue")
                        .HasColumnType("Money");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Probability")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("Date");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("AttridaObjectId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("BusinessCase");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.Contact", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR ContactSequence");

                    b.Property<int?>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountIban")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankAccountSwiftBic")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("CertificateOfIncorporation")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("ContactAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ExternalCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("HasNoVatForInvoicesIssued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBasicContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVatPayer")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("RegisteredAddressId")
                        .HasColumnType("int");

                    b.Property<string>("TaxRegistrationNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.HasIndex("ContactAddressId");

                    b.HasIndex("RegisteredAddressId");

                    b.ToTable("Contact");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.ContactRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DetailContactId")
                        .HasColumnType("int");

                    b.Property<int>("ParentContactId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DetailContactId");

                    b.HasIndex("ParentContactId");

                    b.ToTable("ContactRelationship");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("PhoneCountryCode")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int>("UiOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.CountryLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ParentId");

                    b.ToTable("CountryLocalization");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SwiftBic")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BankAccount");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);

                    b.HasAnnotation("Caching-Priority", CacheItemPriority.Low);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultBankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DefaultBankAccountId");

                    b.ToTable("Currency");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);

                    b.HasAnnotation("Caching-Priority", CacheItemPriority.High);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("AmountInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessPartnerReference")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("DocumentTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("Date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurReference")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("OurReferenceNumberSequenceId")
                        .HasColumnType("int");

                    b.Property<int?>("OurReferenceNumberSequenceValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("Date");

                    b.Property<int?>("PaymentDueDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentOrderDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("Date");

                    b.Property<int>("RelatedTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmountIncludingVat")
                        .HasColumnType("Money");

                    b.Property<decimal?>("TotalAmountIncludingVatInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalAmountPaid")
                        .HasColumnType("Money");

                    b.Property<decimal?>("TotalAmountPaidInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalAmountWithoutVat")
                        .HasColumnType("Money");

                    b.Property<decimal?>("TotalAmountWithoutVatInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentTemplateId");

                    b.HasIndex("OurReferenceNumberSequenceId");

                    b.HasIndex("RelatedTransactionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.TransactionDocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("TransactionDocumentTemplate");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.TransactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountIncludingVat")
                        .HasColumnType("Money");

                    b.Property<decimal?>("AmountIncludingVatInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<decimal>("AmountWithoutVat")
                        .HasColumnType("Money");

                    b.Property<decimal?>("AmountWithoutVatInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("VatAmountInForeignCurrency")
                        .HasColumnType("Money");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(9, 5)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionItem");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.TransactionItemType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TransactionItemType");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);

                    b.HasAnnotation("Caching-Priority", CacheItemPriority.High);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbsenceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceTypeId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Absence");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.AbsenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("AbsenceType");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AbsencesAutoApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("BossId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CooperationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CooperationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivateTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TimesheetNotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("TimesheetsAutoApproved")
                        .HasColumnType("bit");

                    b.Property<string>("TitlePrefix")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TitleSuffix")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.HasIndex("BossId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PrivateTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.EmployeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BasicRate")
                        .HasColumnType("Money");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentTermsId")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyCost")
                        .HasColumnType("Money");

                    b.Property<string>("JobPosition")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("OverheadToPersonalCostsRatio")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentTermsId");

                    b.HasIndex("EmploymentTypeId");

                    b.ToTable("EmployeeHistory");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.EmploymentTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HourPerDay")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("RateType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmploymentTerms");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.EmploymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EmployerContributionsRate")
                        .HasColumnType("decimal(9, 5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.Team", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR TeamSequence");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemTeam")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.TeamMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembership");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Localizations.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UiCulture")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR ProjectSequence");

                    b.Property<int?>("AttridaObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessPartnerEffectiveId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveEffective")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("OverheadToPersonalCostsRatio")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<decimal?>("OverheadToPersonalCostsRatioEffective")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentDueDaysDefault")
                        .HasColumnType("int");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ProjectManagerEffectiveId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttridaObjectId");

                    b.HasIndex("BusinessPartnerEffectiveId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectManagerEffectiveId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Project");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Projects.ProjectPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ProjectPhase");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Projects.ProjectRelation", b =>
                {
                    b.Property<int>("HigherProjectId")
                        .HasColumnType("int");

                    b.Property<int>("LowerProjectId")
                        .HasColumnType("int");

                    b.HasKey("HigherProjectId", "LowerProjectId");

                    b.HasIndex("LowerProjectId");

                    b.ToTable("ProjectRelation");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);

                    b.HasAnnotation("Caching-Priority", CacheItemPriority.High);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255) COLLATE Latin1_General_CI_AI")
                        .HasMaxLength(255);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedUsername")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(2147483647);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(50) COLLATE Latin1_General_CI_AI")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Security.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Sequences.NumberSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DigitCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("NumberSequence");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Sequences.NumberSequenceUnusedNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberSequenceId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumberSequenceId");

                    b.ToTable("NumberSequenceUnusedNumber");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Timesheets.OverheadToPersonalCostsRatio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Ratio")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OverheadToPersonalCostsRatio");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Timesheets.TimesheetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DurationHours")
                        .HasColumnType("decimal(9, 5)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<bool>("ExternalUpdatePending")
                        .HasColumnType("bit");

                    b.Property<decimal?>("OverheadCosts")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PersonalCosts")
                        .HasColumnType("Money");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("TimesheetItemCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("TimesheetItemCategoryId");

                    b.ToTable("TimesheetItem");
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Timesheets.TimesheetItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TimesheetItemCategory");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaComment", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany("CommentsIncludingDeleted")
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaDocument", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany("DocumentsIncludingDeleted")
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Attrida.AttridaTag", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany("Tags")
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.Address", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Crm.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.BusinessCase", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Security.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany()
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.Contact", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany()
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Address", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Address", "RegisteredAddress")
                        .WithMany()
                        .HasForeignKey("RegisteredAddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.ContactRelationship", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "DetailContact")
                        .WithMany("ParentContactRelationships")
                        .HasForeignKey("DetailContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "ParentContact")
                        .WithMany("DetailContactRelationships")
                        .HasForeignKey("ParentContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Crm.CountryLocalization", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Localizations.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Crm.Country", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.Currency", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Finance.BankAccount", "DefaultBankAccount")
                        .WithMany()
                        .HasForeignKey("DefaultBankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.ExchangeRate", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Finance.Currency", "Currency")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.Payment", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.Transaction", "Transaction")
                        .WithMany("PaymentsIncludingDeleted")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.Transaction", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany()
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Finance.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.TransactionDocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Sequences.NumberSequence", "OurReferenceNumberSequence")
                        .WithMany()
                        .HasForeignKey("OurReferenceNumberSequenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.Transaction", "RelatedTransaction")
                        .WithMany()
                        .HasForeignKey("RelatedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Finance.TransactionItem", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Security.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.TransactionItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Projects.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Finance.Transaction", "Transaction")
                        .WithMany("Items")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.Absence", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.HumanResources.AbsenceType", "AbsenceType")
                        .WithMany()
                        .HasForeignKey("AbsenceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Security.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.Employee", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany()
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.HumanResources.Employee", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.HumanResources.Team", "PrivateTeam")
                        .WithMany("Members")
                        .HasForeignKey("PrivateTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.EmployeeHistory", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.HumanResources.Employee", "Employee")
                        .WithMany("HistoriesIncludingDeleted")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.HumanResources.EmploymentTerms", "EmploymentTerms")
                        .WithMany()
                        .HasForeignKey("EmploymentTermsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.HumanResources.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.HumanResources.TeamMembership", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.HumanResources.Employee", "Employee")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.HumanResources.Team", "Team")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Projects.Project", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Attrida.AttridaObject", "AttridaObject")
                        .WithMany()
                        .HasForeignKey("AttridaObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "BusinessPartnerEffective")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerEffectiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Crm.Contact", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Projects.Project", "Parent")
                        .WithMany("ChildrenIncludingDeleted")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Security.User", "ProjectManagerEffective")
                        .WithMany()
                        .HasForeignKey("ProjectManagerEffectiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Security.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Projects.ProjectRelation", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Projects.Project", "HigherProject")
                        .WithMany("AllChildrenAndMeRelations")
                        .HasForeignKey("HigherProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Projects.Project", "LowerProject")
                        .WithMany("AllParentsAndMeRelations")
                        .HasForeignKey("LowerProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Security.UserRole", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Security.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Sequences.NumberSequenceUnusedNumber", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Sequences.NumberSequence", "NumberSequence")
                        .WithMany()
                        .HasForeignKey("NumberSequenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Havit.GoranG3.Model.Timesheets.TimesheetItem", b =>
                {
                    b.HasOne("Havit.GoranG3.Model.Security.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Havit.GoranG3.Model.Projects.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.GoranG3.Model.Timesheets.TimesheetItemCategory", "TimesheetItemCategory")
                        .WithMany()
                        .HasForeignKey("TimesheetItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
