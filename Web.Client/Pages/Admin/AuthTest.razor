@page "/admin/auth-test"
@using Havit.GoranG3.Contracts.GrpcTests;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject ITestFacade TestFacade
@inject NavigationManager NavigationManager

<h1>Auth Test</h1>
<EditForm Model="@request" OnValidSubmit="Submit">
	<InputText @bind-Value="request.Message" />
	<InputNumber @bind-Value="request.Value" />
	<input type="submit" value="Submit" />
</EditForm>

<div><button @onclick="AddRole">Add role</button></div>

<p>
	<AuthorizeView>
		<Authorized>Authorized, name: @context.User.Identity.Name</Authorized>
		<NotAuthorized>Not Authorized</NotAuthorized>
	</AuthorizeView>
</p>
<AuthorizeView Roles="SystemAdministrator">
	<p>Has SystemAdministrator role.</p>
</AuthorizeView>
<AuthorizeView Roles="UserSettingsAdministrator">
	<p>Has UserSettingsAdministrator role.</p>
</AuthorizeView>


@if (result != null)
{
	@result.Message
	<br />
	@result.Value
	<br />
}

<LoginDisplay />

@code
{
	DoSomethingRequest request = new DoSomethingRequest() { Message = "Jupííí", Value = 42 };
	DoSomethingResult result;

	async Task Submit()
	{
		try
		{
			result = await TestFacade.DoSomething(request);
		}
		catch (Grpc.Core.RpcException e) when (e.Message?.Contains("AccessTokenNotAvailableException") ?? false)
		{
			// TODO GrpcClientInterceptor?
			// ex.Redirect();
			NavigationManager.NavigateTo("/authentication/login");
		}
		catch (Grpc.Core.RpcException ex)
		{
			Console.WriteLine("Inner exception:", ex.InnerException);
			Console.WriteLine("Trailers:", ex.Trailers.Count);
		}
	}

	async Task AddRole()
	{
		try
		{
			await TestFacade.AddRole();
		}
		catch (Grpc.Core.RpcException e) when (e.Message?.Contains("AccessTokenNotAvailableException") ?? false)
		{
			// TODO GrpcClientInterceptor?
			// ex.Redirect();
			NavigationManager.NavigateTo("/authentication/login");
		}
	}
}